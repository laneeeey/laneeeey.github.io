import { useState, useEffect, useCallback } from "react";
import {
  Globe,
  Loader2,
  Settings,
  ZoomIn,
  ZoomOut,
  RotateCcw,
  Accessibility,
} from "lucide-react";
import "../styles/summarizer.css";
import headsetIcon from "../assets/headsetIcon.png";
import axios from "axios";

export default function Summarizer({ initUrl }) {
  const [page, setPage] = useState("input");
  const [zoomLevel, setZoomLevel] = useState(100);
  const [fontSizePx, setFontSizePx] = useState(36);

  const [url, setUrl] = useState("");
  const [summary, setSummary] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const [voiceSettings, setVoiceSettings] = useState({
    rate: 0.8,
    pitch: 1,
    voice: "default",
  });
  const [selectedLang, setSelectedLang] = useState("ko-KR");
  const [availableVoices, setAvailableVoices] = useState([]);
  const [showVoiceModal, setShowVoiceModal] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentAudio, setCurrentAudio] = useState(null);
  const [isAutoRestarting, setIsAutoRestarting] = useState(false);

  // Ïñ∏Ïñ¥ ÏΩîÎìúÎ•º Î∞±ÏóîÎìú ÌòïÏãùÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const getBackendLanguage = (frontendLang) => {
    const languageMap = {
      'ko-KR': 'KOREAN',
      'en-US': 'ENGLISH', 
      'ja-JP': 'JAPANESE',
      'zh-CN': 'CHINESE'
    };
    return languageMap[frontendLang] || 'KOREAN';
  };

  // Ï¥àÍ∏∞ ÏÑ§Ï†ï
  useEffect(() => {
    try {
      const saved = localStorage.getItem("accessibilitySettings");
      if (saved) {
        const p = JSON.parse(saved);
        if (typeof p.zoomLevel === "number") setZoomLevel(p.zoomLevel);
        if (typeof p.fontSizePx === "number") setFontSizePx(p.fontSizePx);
        if (p.voiceSettings) {
          // volumeÏù¥ ÏóÜÎäî Í≤ΩÏö∞Î•º ÎåÄÎπÑÌï¥ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
          const savedSettings = { ...p.voiceSettings };
          if (!savedSettings.rate) savedSettings.rate = 0.8;
          if (!savedSettings.pitch) savedSettings.pitch = 1;
          if (!savedSettings.voice) savedSettings.voice = "default";
          setVoiceSettings(savedSettings);
        }
        if (p.selectedLang) setSelectedLang(p.selectedLang);
      }
    } catch (e) {
      console.error("Failed to load accessibility settings", e);
    }

    if (!("speechSynthesis" in window)) return;
    const loadVoices = () => setAvailableVoices(window.speechSynthesis.getVoices());
    loadVoices();
    window.speechSynthesis.onvoiceschanged = loadVoices;

    const handleEsc = (e) => {
      if (e.key === "Escape") setShowVoiceModal(false);
    };
    window.addEventListener("keydown", handleEsc);
    return () => window.removeEventListener("keydown", handleEsc);
  }, []);

  const handleSummarize = useCallback(
  async (forceUrl) => {
    const target = ((forceUrl ?? url) || "").trim();
    if (!target) return;

    try { new URL(target); } catch { alert("Ïú†Ìö®Ìïú URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."); return; }

    setIsLoading(true);
    setSummary("");

    try {
      const form = new URLSearchParams();
      form.set('link', target);
      form.set('language', getBackendLanguage(selectedLang));

      const resp = await axios.post(`${import.meta.env.VITE_API_BASE}/summary`, form, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      });

      const body = resp?.data;
      const payload = body?.data ?? body;
      const text =
        payload?.choices?.[0]?.message?.content ??
        payload?.content ??
        payload?.summary ??
        payload?.text ??
        (typeof payload === "string" ? payload : JSON.stringify(payload, null, 2));

      setSummary(text || "ÏöîÏïΩ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.");
      setPage("result");
    } catch (err) {
      console.error("ÏöîÏïΩ API Ïò§Î•ò:", err);
      console.error("DEBUG:", err.response?.status, err.response?.data);
      setSummary(
        (err.response?.data && (err.response.data.message || JSON.stringify(err.response.data))) ||
        err.message ||
        "ÏöîÏïΩ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî."
      );
      setPage("result");
    } finally {
      setIsLoading(false);
    }
  },
  [url, selectedLang]
);


  // initUrl
  useEffect(() => {
    if (initUrl && typeof initUrl === "string") {
      setUrl(initUrl);
      const t = setTimeout(() => handleSummarize(initUrl), 0);
      return () => clearTimeout(t);
    }
  }, [initUrl, handleSummarize]);

  // ÏùåÏÑ± ÏÑ§Ï†ï Î≥ÄÍ≤Ω Ïãú ÏûêÎèô Ïû¨ÏãúÏûë
  useEffect(() => {
    console.log("ÏùåÏÑ± ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏:", voiceSettings);
    
    // Ïû¨ÏÉù Ï§ëÏùº Îïå ÏÑ§Ï†ïÏù¥ Î≥ÄÍ≤ΩÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú ÏÉàÎ°úÏö¥ ÏÑ§Ï†ïÏúºÎ°ú Ïû¨ÏãúÏûë
    if (isPlaying && currentAudio && summary && !isAutoRestarting) {
      console.log("ÏùåÏÑ± ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ - ÏÉàÎ°úÏö¥ ÏÑ§Ï†ïÏúºÎ°ú Ïû¨ÏãúÏûë");
      setIsAutoRestarting(true);
      
      // Í∏∞Ï°¥ ÏùåÏÑ± ÏôÑÏ†Ñ Ï§ëÏßÄ
      currentAudio.pause();
      currentAudio.currentTime = 0;
      setIsPlaying(false);
      setCurrentAudio(null);
      
      // Ïû†Ïãú ÌõÑ ÏÉàÎ°úÏö¥ ÏÑ§Ï†ïÏúºÎ°ú TTS API Ìò∏Ï∂ú
      setTimeout(() => {
        handlePlayAudio();
      }, 100);
    }
  }, [voiceSettings.rate, voiceSettings.pitch]);

  // Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω ÏãúÏóêÎèÑ ÏûêÎèô Ïû¨ÏãúÏûë
  useEffect(() => {
    if (isPlaying && currentAudio && summary && !isAutoRestarting) {
      console.log("Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω Í∞êÏßÄ - ÏÉàÎ°úÏö¥ Ïñ∏Ïñ¥Î°ú Ïû¨ÏãúÏûë");
      setIsAutoRestarting(true);
      
      // Í∏∞Ï°¥ ÏùåÏÑ± ÏôÑÏ†Ñ Ï§ëÏßÄ
      currentAudio.pause();
      currentAudio.currentTime = 0;
      setIsPlaying(false);
      setCurrentAudio(null);
      
      // Ïû†Ïãú ÌõÑ ÏÉàÎ°úÏö¥ ÏÑ§Ï†ïÏúºÎ°ú TTS API Ìò∏Ï∂ú
      setTimeout(() => {
        handlePlayAudio();
      }, 100);
    }
  }, [selectedLang]);

  const handlePlayAudio = async () => {
    if (!summary) return;
    
    // Ïù¥ÎØ∏ Ïû¨ÏÉù Ï§ëÏù¥Î©¥ Ï§ëÏßÄ
    if (isPlaying && currentAudio) {
      currentAudio.pause();
      currentAudio.currentTime = 0;
      setIsPlaying(false);
      setCurrentAudio(null);
      return;
    }
    
    try {
      // TTS API Ìò∏Ï∂ú
      console.log("üéµ TTS API Ìò∏Ï∂ú ÏãúÏûë");
      console.log("üìä ÌòÑÏû¨ ÏÑ§Ï†ïÍ∞í:", {
        speed: voiceSettings.pitch,       // ÏùåÏÑ± ÎÜíÏù¥ (0.5 - 2.0)
        pitch: voiceSettings.rate,        // ÏùΩÍ∏∞ ÏÜçÎèÑ (0.5 - 2.0)
        language: getBackendLanguage(selectedLang)
      });
      console.log("üåê ÏÑ†ÌÉùÎêú Ïñ∏Ïñ¥:", selectedLang);
      console.log("üîä ÏùåÏÑ± ÏÑ§Ï†ï:", voiceSettings);
      
              const response = await axios.get("/api/tts", {
          params: {
            text: summary,
            speed: voiceSettings.pitch,       // ÏùåÏÑ± ÎÜíÏù¥ (0.5 - 2.0)
            pitch: voiceSettings.rate,        // ÏùΩÍ∏∞ ÏÜçÎèÑ (0.5 - 2.0)
            language: getBackendLanguage(selectedLang)
          },
          responseType: 'blob' // ÏùåÏÑ± ÌååÏùºÏùÑ blobÏúºÎ°ú Î∞õÍ∏∞
        });
      
      // ÏùåÏÑ± ÌååÏùº Ïû¨ÏÉù
      const audioBlob = new Blob([response.data], { type: 'audio/mpeg' });
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      
      // Ïû¨ÏÉù ÏÉÅÌÉú ÏÑ§Ï†ï
      setIsPlaying(true);
      setCurrentAudio(audio);
      
      // Ïû¨ÏÉù ÏãúÏûë
      await audio.play();
      
      // Ïû¨ÏÉù ÏôÑÎ£å Ïãú ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      audio.onended = () => {
        setIsPlaying(false);
        setCurrentAudio(null);
        setIsAutoRestarting(false);
        URL.revokeObjectURL(audioUrl);
      };
      
      // Ïû¨ÏÉù Ï§ëÏßÄ Ïãú ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      audio.onpause = () => {
        setIsPlaying(false);
        setCurrentAudio(null);
        setIsAutoRestarting(false);
      };
      
    } catch (error) {
      console.error("TTS API Ïò§Î•ò:", error);
      // TTS API Ïã§Ìå® Ïãú Í∏∞Ï°¥ Î∏åÎùºÏö∞Ï†Ä ÎÇ¥Ïû• ÏùåÏÑ± ÏÇ¨Ïö©
      if (!("speechSynthesis" in window)) {
        alert("Ïù¥ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑúÎäî ÏùåÏÑ± Ïû¨ÏÉùÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏïÑÏöî.");
        return;
      }
      if (window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
        return;
      }
      const utter = new SpeechSynthesisUtterance(summary);
      utter.lang = selectedLang;
      utter.rate = voiceSettings.rate;
      utter.pitch = voiceSettings.pitch;
      utter.volume = voiceSettings.volume;

      let sel = availableVoices.find((v) => v.lang === selectedLang);
      if (!sel) {
        const base = selectedLang.split("-")[0];
        sel = availableVoices.find((v) => v.lang?.startsWith(base));
      }
      if (voiceSettings.voice !== "default") {
        const byName = availableVoices.find((v) => v.name === voiceSettings.voice);
        if (byName) sel = byName;
      }
      if (sel) utter.voice = sel;
      window.speechSynthesis.speak(utter);
    }
  };

  const handleZoomIn = () => setZoomLevel((z) => Math.min(z + 25, 200));
  const handleZoomOut = () => setZoomLevel((z) => Math.max(z - 25, 75));
  const resetZoom = () => setZoomLevel(100);

  const saveSettings = () => {
    localStorage.setItem(
      "accessibilitySettings",
      JSON.stringify({ zoomLevel, fontSizePx, voiceSettings, selectedLang })
    );
    setShowVoiceModal(false);
  };

  const scale = zoomLevel / 100;
  const scaledWidth = `${100 / scale}%`;

  return (
    <div className="summarizer bg-gray-900 text-white flex flex-col" style={{ minHeight: "100vh" }}>
      <div style={{ fontSize: `${fontSizePx}px` }}>
        {/* Ìó§Îçî */}
        <header className="px-0 py-6 bg-gray-800 border-b-2 border-gray-600">
          <div className="container" style={{ maxWidth: "none", width: "100%" }}>
            <div className="title">
              <Accessibility style={{ width: "80px", height: "80px" }} className="logo-icon text-blue-400" />
              <div className="title-text">
                <h1 className="text-3xl font-bold">
                  <img
                    src="/Hannoon.png"
                    alt="HANNOON"
                    className="title-logo"
                    style={{ filter: "invert(1) brightness(2)" }}
                  />
                </h1>
                <p className="text-lg text-gray-300 ml-4">Ï†ÄÏãúÎ†•ÏûêÎ•º ÏúÑÌïú ÏõπÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ ÏöîÏïΩ ÏÑúÎπÑÏä§</p>
              </div>
            </div>

            <div className="toolbar">
              <div className="zoombox">
                <button className="btn-ghost" onClick={handleZoomOut} disabled={zoomLevel <= 75}>
                  <ZoomOut />
                </button>
                <span>{Math.round(scale * 100)}%</span>
                <button className="btn-ghost" onClick={handleZoomIn} disabled={zoomLevel >= 200}>
                  <ZoomIn />
                </button>
                <button className="btn-ghost" onClick={resetZoom}>
                  <RotateCcw />
                </button>
              </div>
              <button className="btn-outline flex items-center gap-2" onClick={() => setShowVoiceModal(true)}>
                <Settings className="h-5 w-5" /> ÏùåÏÑ±ÏÑ§Ï†ï
              </button>
            </div>
          </div>
        </header>

        <div
          style={{
            transform: `scale(${scale})`,
            transformOrigin: "top left",
            width: scaledWidth,
          }}
        >
          <div className="flex-1">
            <div className="container main-wrap" style={{ maxWidth: "none", width: "100%" }}>
              {page === "input" && (
                <div className="card" style={{ width: "100%" }}>
                  <div className="head mt-0">
                    <div>
                      <h2 className="text-2xl flex items-center gap-2">
                        <Globe size={48} className="text-blue-400" /> ÏõπÌéòÏù¥ÏßÄ Ï£ºÏÜå ÏûÖÎ†•
                      </h2>
                      <p className="text-gray-300">ÏöîÏïΩÌïòÍ≥† Ïã∂ÏùÄ ÌéòÏù¥ÏßÄ Ï£ºÏÜåÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî</p>
                    </div>
                  </div>

                  <div className="body">
                    <input
                      type="url"
                      placeholder="https://ÏõπÏÇ¨Ïù¥Ìä∏Ï£ºÏÜå.com/ÏÉÅÌíàÌéòÏù¥ÏßÄ"
                      value={url}
                      onChange={(e) => setUrl(e.target.value)}
                      className="input"
                    />
                    <div className="language-selector">
                      <select
                        id="summary-language"
                        value={selectedLang}
                        onChange={(e) => setSelectedLang(e.target.value)}
                        className="language-select"
                      >
                        <option value="ko-KR">ÌïúÍµ≠Ïñ¥</option>
                        <option value="en-US">ÏòÅÏñ¥</option>
                        <option value="ja-JP">ÏùºÎ≥∏Ïñ¥</option>
                        <option value="zh-CN">Ï§ëÍµ≠Ïñ¥(Í∞ÑÏ≤¥)</option>
                      </select>
                    </div>
                    <button
                      className="btn-primary"
                      onClick={() => handleSummarize()}
                      disabled={!url.trim() || isLoading}
                    >
                      {isLoading ? <Loader2 className="spin" /> : <Accessibility />}
                      {isLoading ? "Î∂ÑÏÑùÏ§ë..." : "ÏöîÏïΩÌïòÍ∏∞"}
                    </button>
                    <div className="mt-8 pt-6 border-t border-gray-600">
                      <h3 className="text-xl font-bold text-white mb-4">ÏÇ¨Ïö© Î∞©Î≤ï</h3>
                      <div className="space-y-3">
                        <div className="howto-item">
                          <div className="step">1</div>
                          <span className="text-lg text-gray-300">ÏõπÏÇ¨Ïù¥Ìä∏ Ï£ºÏÜå ÏûÖÎ†•</span>
                        </div>
                        <div className="howto-item">
                          <div className="step">2</div>
                          <span className="text-lg text-gray-300">AIÍ∞Ä ÏûêÎèôÏúºÎ°ú Ï†ïÎ≥¥ ÏöîÏïΩ</span>
                        </div>
                        <div className="howto-item">
                          <div className="step">3</div>
                          <span className="text-lg text-gray-300">ÏùåÏÑ±ÏúºÎ°ú Ìé∏Î¶¨ÌïòÍ≤å Îì£Í∏∞</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {page === "result" && (
                <div className="card" style={{ width: "100%" }}>
                  <div className="head">
                    <h2 className="text-2xl">ÏöîÏïΩ Í≤∞Í≥º</h2>
                    {summary && (
                      <button 
                        className={`btn-ghost ${isPlaying ? 'playing' : ''}`} 
                        onClick={handlePlayAudio} 
                        aria-label={isPlaying ? "ÏùåÏÑ± Ï§ëÏßÄ" : "ÏùåÏÑ± Ïû¨ÏÉù"}
                      >
                        <img 
                          src={headsetIcon} 
                          alt={isPlaying ? "ÏùåÏÑ± Ï§ëÏßÄ" : "ÏùåÏÑ± Ïû¨ÏÉù"} 
                          className={`play-audio-icon ${isPlaying ? 'playing' : ''}`} 
                        />
                      </button>
                    )}
                  </div>

                  <div className="body">
                    {summary ? (
                      <textarea
                        className="result"
                        value={summary}
                        readOnly
                        style={{ fontSize: `${fontSizePx}px`, lineHeight: 1.5 }}
                      />
                    ) : (
                      <div className="placeholder" style={{ fontSize: `${fontSizePx}px` }}>
                        <Globe size={64} className="icon" />
                        <p>ÏöîÏïΩ ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                      </div>
                    )}
                    <div style={{ display: "flex", gap: 12, marginTop: 12 }}>
                      <button className="btn-outline" onClick={() => setPage("input")}>
                        ‚Üê Îí§Î°úÍ∞ÄÍ∏∞
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* ÏùåÏÑ± ÏÑ§Ï†ï Î™®Îã¨ */}
      {showVoiceModal && (
        <div className="modal-backdrop" onClick={() => setShowVoiceModal(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-head">
              <h3>ÏùåÏÑ± ÏÑ§Ï†ï</h3>
            </div>
            <div className="modal-body">
              <label>ÏùΩÍ∏∞ ÏÜçÎèÑ: {voiceSettings.rate.toFixed(1)}</label>
              <input
                type="range"
                min="0.5"
                max="2"
                step="0.1"
                value={voiceSettings.rate}
                onChange={(e) => {
                  const newRate = parseFloat(e.target.value);
                  console.log("ÏùΩÍ∏∞ ÏÜçÎèÑ Î≥ÄÍ≤Ω:", newRate);
                  setVoiceSettings({ ...voiceSettings, rate: newRate });
                }}
              />
              <label>ÏùåÏÑ± ÎÜíÏù¥: {voiceSettings.pitch.toFixed(1)}</label>
              <input
                type="range"
                min="0.5"
                max="2"
                step="0.1"
                value={voiceSettings.pitch}
                onChange={(e) => {
                  const newPitch = parseFloat(e.target.value);
                  console.log("ÏùåÏÑ± ÎÜíÏù¥ Î≥ÄÍ≤Ω:", newPitch);
                  setVoiceSettings({ ...voiceSettings, pitch: newPitch });
                }}
              />
              <label>Í∏ÄÏî® ÌÅ¨Í∏∞: {fontSizePx}px</label>
              <input
                type="range"
                min="24"
                max="60"
                step="2"
                value={fontSizePx}
                onChange={(e) => setFontSizePx(parseInt(e.target.value, 10))}
              />
              <label>Ïñ∏Ïñ¥ ÏÑ†ÌÉù</label>
              <select value={selectedLang} onChange={(e) => setSelectedLang(e.target.value)}>
                <option value="ko-KR">ÌïúÍµ≠Ïñ¥</option>
                <option value="en-US">ÏòÅÏñ¥</option>
                <option value="ja-JP">ÏùºÎ≥∏Ïñ¥</option>
                <option value="zh-CN">Ï§ëÍµ≠Ïñ¥(Í∞ÑÏ≤¥)</option>
              </select>
            </div>
            <div className="modal-foot">
              <button className="btn-primary" onClick={saveSettings}>
                Ï†ÄÏû•
              </button>
              <button className="btn-outline" onClick={() => setShowVoiceModal(false)}>
                Îã´Í∏∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
